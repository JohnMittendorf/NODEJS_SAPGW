{"ts":1349093034685,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var http = require('http'),\n    express = require('express'),\n    xml2js = require('xml2js'),\n    app = express.createServer(),\n    //app = express(),\n    port = process.env.PORT;\n\n// The SalesOrder service requires authentication\n// get the username/password from the SCN page. \nvar username = 'GW@ESW',\n    password = 'ESW4GW';\n\nvar sapgw = {\n  host: 'gw.esworkplace.sap.com',\n\n  // set up Basic authentication\n  headers: {\n    'Authorization': 'Basic ' + new Buffer(username + ':' + password).toString('base64')\n  }\n}\n\n// Action: Proxy an incoming (ie. from the user's browser) request to the SAP Gateway\nfunction proxy(user_request, user_response) {\n\n  // We're proxying calls,\n  // so copy the path from the user request\n  sapgw.path = user_request.url;\n\n  // Use a client request to call SAP Gateway\n  http.get(sapgw, function (sapgw_response) {\n\n    // Include a content type in the response header\n    user_response.header('Content-Type', 'application/atom+xml;type=feed');\n\n    // In Node, http responses are streams. You can just\n    // pipe the response data from the Gateway to the user.\n    sapgw_response.pipe(user_response);\n  });\n}\n\n// Action: Generate an Excel workbook containing SalesOrders on the fly  \nfunction workbook(req, res) {\n\n  // We will fetch the SalesOrderCollection from SAP Gateway\n  sapgw.path = '/sap/opu/sdata/IWFND/SALESORDER/SalesOrderCollection';\n\n  // Kick-off by fetching the SalesOrderCollection..       \n  http.get(sapgw, function (sapgw_response) {\n    var xml = '';\n\n    // Every time Node receives a chunk of data\n    // from SAP Gateway, the 'data' event fires.\n    // We just collect all chunks into a string\n    sapgw_response.on(\"data\", function (chunk) {\n      xml += chunk\n    });\n\n    // The 'end' event fires when the SAP Gateway response is done \n    // We can start processing the xml string...\n    sapgw_response.on(\"end\", function () {\n\n      // Node.js doesn't automatically parse the XML (like XmlHttpRequest),\n      // so we need to do that explicitly.\n      // We will use the xml2js module to parse the XML string\n      // into a JavaScript object\n      // Create a parser to convert the XML to JavaScript object\n      var parser = new xml2js.Parser();\n\n      // The 'end' event fires when the parser is done.\n      // The resulting JS object is passed as parameter.\n      parser.on('end', function (result) {\n        // The result parameter is a complete representation \n        // of the parsed XML string.\n        // We need to extract the values we need to render the workbook\n        var rows = [],\n\n        // columns is the subset of properties we want to include\n        // in the Excel list\n        columns = ['SalesOrderID', 'CustomerName', 'NetSum', 'Tax', 'TotalSum'];\n\n        // the value of result['atom:entry'] is an array of objects, \n        // representing 's in the XML string.\n        // Each entry represents a SalesOrder\n        result['atom:entry'].forEach(function (entry) {\n          var row = {},\n            // properties points to the parsed properties \n            properties = entry['atom:content']['m:properties'];\n\n          columns.forEach(function (property) {\n            // get the value for the property\n            row[property] = properties['d:' + property]['#'] || \n                            properties['d:' + property];\n          });\n\n          // add it to the rows \n          rows.push(row)\n\n        })\n\n        // We're done processing the response and have extracted all data required to \n        // create the workbook.\n        // First, include the proper HTTP headers\n        res.header('content-disposition', 'attachment;filename=SalesOrders.xml');\n        res.header('Content-Type', 'application/vnd.ms-excel');\n\n        // Next, render the contents of Excel workbook as\n        // Excel 2003 XML format, using the Workbook.ejs template\n        res.render('Workbook.ejs', {\n          layout: false,\n          rows: rows\n        });\n\n      });\n\n      // Set the parser in motion with the xml data received\n      // from SAP Gateway. The parser will turn the XML string into\n      // a JS object. When done, the 'end' event will fire\n      // and the 'end' event handler defined above will extract the values\n      // and render the Workbook.\n      parser.parseString(xml);\n    });\n\n  });\n};\n\n// Action: perform a redirect to the home page (index.html)   \nfunction home(req, res) {\n  res.redirect('/index.html')\n}\n\n// Now we will set up the routing for the server...\n// Look if the request is for a static file in the public directory\n// this is where the client side html, css, js and SAPUI5 resources are located\napp.use(express.static(__dirname + '/public'));\n\n// If you just call the server (root), redirect to homepage\napp.get('/', home);\n\n// Requests starting '/sap/' are proxied to the SAP Gateway\napp.get('/sap/*', proxy);\n\n// Route for workbook action\napp.get('/workbook', workbook);\n\n// Routes are set up,\n// Now start the app server...\napp.listen(port);\n\nconsole.log('Server started on port ' + port);\n\n"]],"start1":0,"start2":0,"length1":0,"length2":5028}]],"length":5028}
{"contributors":[],"silentsave":false,"ts":1349346013058,"patch":[[{"diffs":[[0,"    "],[-1,"xml2js = require('xml2js'),\n    app = express.createServer(),\n    //"],[0,""],[1,""],[0,"app "]],"start1":62,"start2":62,"length1":76,"length2":8},{"diffs":[[0,"ion\n"],[-1,"// get the username/password from the SCN page. \n"],[0,"var "]],"start1":159,"start2":159,"length1":57,"length2":8},{"diffs":[[0,"apgw = {"],[-1,"\n"],[1," "],[0,"  host: "]],"start1":219,"start2":219,"length1":17,"length2":17},{"diffs":[[0,"m',\n"],[-1,"\n"],[0,"  "],[-1,"// set up Basic authentication\n"],[1,"            "],[0,"  he"]],"start1":258,"start2":258,"length1":42,"length2":22},{"diffs":[[0,"aders: {"],[-1,"\n   "],[0," 'Author"]],"start1":280,"start2":280,"length1":20,"length2":16},{"diffs":[[0,"64')"],[1," }"],[0,"\n  "],[-1,"}\n}"],[1,"          };"],[0,"\n\n//"]],"start1":369,"start2":369,"length1":14,"length2":25},{"diffs":[[0,"g calls,"],[-1,"\n  //"],[0,""],[1,""],[0," so copy"]],"start1":543,"start2":543,"length1":21,"length2":16},{"diffs":[[0,"can just"],[-1,"\n    //"],[0," pipe th"]],"start1":896,"start2":896,"length1":23,"length2":16},{"diffs":[[0," });\n}\n\n"],[1,"\n"],[0,"// Actio"]],"start1":999,"start2":999,"length1":16,"length2":17},{"diffs":[[0,"on: "],[-1,"Generate an Excel workbook containing SalesOrders on the fly  \nfunction workbook(req, res) {\n\n  // We will fetch the SalesOrderCollection from SAP Gateway\n  sapgw.path = '/sap/opu/sdata/IWFND/SALESORDER/SalesOrderCollection';\n\n  // Kick-off by fetching the SalesOrderCollection..       \n  http.get(sapgw, function (sapgw_response) {\n    var xml = '';\n\n    // Every time Node receives a chunk of data\n    // from SAP Gateway, the 'data' event fires.\n    // We just collect all chunks into a string\n    sapgw_response.on(\"data\", function (chunk) {\n      xml += chunk\n    });\n\n    // The 'end' event fires when the SAP Gateway response is done \n    // We can start processing the xml string...\n    sapgw_response.on(\"end\", function () {\n\n      // Node.js doesn't automatically parse the XML (like XmlHttpRequest),\n      // so we need to do that explicitly.\n      // We will use the xml2js module to parse the XML string\n      // into a JavaScript object\n      // Create a parser to convert the XML to JavaScript object\n      var parser = new xml2js.Parser();\n\n      // The 'end' event fires when the parser is done.\n      // The resulting JS object is passed as parameter.\n      parser.on('end', function (result) {\n        // The result parameter is a complete representation \n        // of the parsed XML string.\n        // We need to extract the values we need to render the workbook\n        var rows = [],\n\n        // columns is the subset of properties we want to include\n        // in the Excel list\n        columns = ['SalesOrderID', 'CustomerName', 'NetSum', 'Tax', 'TotalSum'];\n\n        // the value of result['atom:entry'] is an array of objects, \n        // representing 's in the XML string.\n        // Each entry represents a SalesOrder\n        result['atom:entry'].forEach(function (entry) {\n          var row = {},\n            // properties points to the parsed properties \n            properties = entry['atom:content']['m:properties'];\n\n          columns.forEach(function (property) {\n            // get the value for the property\n            row[property] = properties['d:' + property]['#'] || \n                            properties['d:' + property];\n          });\n\n          // add it to the rows \n          rows.push(row)\n\n        })\n\n        // We're done processing the response and have extracted all data required to \n        // create the workbook.\n        // First, include the proper HTTP headers\n        res.header('content-disposition', 'attachment;filename=SalesOrders.xml');\n        res.header('Content-Type', 'application/vnd.ms-excel');\n\n        // Next, render the contents of Excel workbook as\n        // Excel 2003 XML format, using the Workbook.ejs template\n        res.render('Workbook.ejs', {\n          layout: false,\n          rows: rows\n        });\n\n      });\n\n      // Set the parser in motion with the xml data received\n      // from SAP Gateway. The parser will turn the XML string into\n      // a JS object. When done, the 'end' event will fire\n      // and the 'end' event handler defined above will extract the values\n      // and render the Workbook.\n      parser.parseString(xml);\n    });\n\n  });\n};\n\n// Action: perform a redirect to the home page (index.html)   \nfunction home(req, res) {\n  res.redirect('/index.html')\n}\n\n// Now we will set up the routing for the server...\n// Look if the request is for a static file in the public directory\n// this is where the client side html, css, js and SAPUI5 resources are located\napp.use(express.static(__dirname + '/public'));\n\n// If you just call the server (root), redirect to homepage\napp.get('/', home);\n\n// Requests starting '/sap/' are proxied to the SAP Gateway\napp.get('/sap/*', proxy);\n\n// Route for workbook action\napp.get('/workbook', workbook);"],[1,"perform a redirect to the home page (index.html)\nfunction home(req, res) {\n  res.redirect('/index.html');\n}\n\n// Now we will set up the routing for the server...\n\n// If you just call the server (root), redirect to homepage\napp.get('/', home);\n\n// Requests starting '/sap/' are proxied to the SAP Gateway\napp.get('/sap/*', proxy);\n\n// Look if the request is for a static file in the public directory\n// this is where the client side html, css, js and SAPUI5 resources are located\napp.use(express.static(__dirname + '/public'));\n"],[0,"\n\n//"]],"start1":1015,"start2":1015,"length1":3754,"length2":534},{"diffs":[[0,"t ' + port);"],[-1,"\n"],[0,""],[1,""],[0,"\n"]],"start1":1653,"start2":1653,"length1":14,"length2":13}]],"length":1666,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349355657547,"patch":[[{"diffs":[[0,"/public'"],[1,", { maxAge: 120000 }"],[0,"));\n\n\n//"]],"start1":1533,"start2":1533,"length1":16,"length2":36}]],"length":1686,"saved":false}
